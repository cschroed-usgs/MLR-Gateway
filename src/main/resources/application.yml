server:
  port: 8443
  use-forward-headers: true
  ssl:
    key-store: ${keystoreLocation}
    key-store-password: ${keystorePassword}
    key-password: ${keystorePassword}

temporaryNotificationEmail: ${mlrgateway_temporaryNotificationEmail}
dbInitializerEnabled: true

zuul:
  retryable: true
  ribbonIsolationStrategy: SEMAPHORE
  routes:
    legacyCruBase:
      path: /monitoringLocations**
      serviceId: legacyCru
      stripPrefix: false
    legacyCruPlus:
      path: /monitoringLocations/**
      serviceId: legacyCru
      stripPrefix: false

ddot:
  ribbon:
    listOfServers: ${mlrgateway_ddotServers}
    IsSecure: ${ddotIsSecure:true}

legacyTransformer:
  ribbon:
    listOfServers: ${mlrgateway_legacyTransformerServers}
    IsSecure: ${legacyTransformerIsSecure:true}

legacyValidator:
  ribbon:
    listOfServers: ${mlrgateway_legacyValidatorServers}
    IsSecure: ${legacyValidatorIsSecure:true}

legacyCru:
  ribbon:
    listOfServers: ${mlrgateway_legacyCruServers}
    IsSecure: ${legacyCruIsSecure:true}

fileExport:
  ribbon:
    listOfServers: ${mlrgateway_fileExportServers}
    IsSecure: ${fileExportIsSecure:true}

notification:
  ribbon:
    listOfServers: ${mlrgateway_notificationServers}
    IsSecure: ${notificationIsSecure:true}

eureka:
  client:
    enabled: false

feign:
  hystrix:
    enabled: true

ribbon:
  MaxAutoRetries: ${mlrgateway_ribbonMaxAutoRetries}
  MaxAutoRetriesNextServer: 0
  ConnectTimeout: ${mlrgateway_ribbonConnectTimeout}
  ReadTimeout: ${mlrgateway_ribbonReadTimeout}
  OkToRetryOnAllOperations: true

hystrix:
  shareSecurityContext: true
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: ${mlrgateway_hystrixThreadTimeout}

logging:
  level:
    org:
      springframework: ${mlrgateway_springFrameworkLogLevel}

security:
  require-ssl: true
  basic:
    enabled: false
#  oauth2:
#    client:
#      clientId: ${oauthClientId}
#      clientSecret: ${oauthClientSecret}
#      accessTokenUri: ${oauthClientAccessTokenUri}
#      userAuthorizationUri: ${oauthClientAuthorizationUri}
#    resource:
#      id: ${oauthResourceId}
#      jwt:
#        keyUri: ${oauthResourceTokenKeyUri}

nwis:
  client:
    clientId: ${oauthClientId}
    clientSecret: ${oauthClientSecret}
    accessTokenUri: ${oauthClientAccessTokenUri}
    userAuthorizationUri: ${oauthClientAuthorizationUri}
    tokenName: oauth_token
    authenticationScheme: query
    clientAuthenticationScheme: form
  resource:
    id: ${oauthResourceId}
    jwt:
      keyUri: ${oauthResourceTokenKeyUri}

spring:
  profiles:
    active: default, swagger

maintenanceRoles: ROLE_DBA_55
