server:
  port: ${serverPort:8080}

mlrServicePassword: ${mlrgateway_mlrServicePassword}
temporaryNotificationEmail: ${mlrgateway_temporaryNotificationEmail}

dbInitializerEnabled: true
security.sessions: NEVER

zuul:
  retryable: true
  ribbonIsolationStrategy: SEMAPHORE
  routes:
    legacyCruBase:
      path: /monitoringLocations**
      serviceId: legacyCru
      stripPrefix: false
    legacyCruPlus:
      path: /monitoringLocations/**
      serviceId: legacyCru
      stripPrefix: false

ddot:
  ribbon:
    listOfServers: ${mlrgateway_ddotServers}

legacyTransformer:
  ribbon:
    listOfServers: ${mlrgateway_legacyTransformerServers}

legacyValidator:
  ribbon:
    listOfServers: ${mlrgateway_legacyValidatorServers}

legacyCru:
  ribbon:
    listOfServers: ${mlrgateway_legacyCruServers}

fileExport:
  ribbon:
    listOfServers: ${mlrgateway_fileExportServers}

notification:
  ribbon:
    listOfServers: ${mlrgateway_notificationServers}

eureka:
  client:
    enabled: false

feign:
  hystrix:
    enabled: true

ribbon:
  MaxAutoRetries: ${mlrgateway_ribbonMaxAutoRetries}
  MaxAutoRetriesNextServer: 0
  ConnectTimeout: ${mlrgateway_ribbonConnectTimeout}
  ReadTimeout: ${mlrgateway_ribbonReadTimeout}
  OkToRetryOnAllOperations: true

hystrix:
  shareSecurityContext: true
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: ${mlrgateway_hystrixThreadTimeout}

logging:
  level:
    org:
      springframework: ${mlrgateway_springFrameworkLogLevel}

security:
  basic:
    enabled: false
  oauth2:
    client:
      clientId: ${oauthClientId}
      clientSecret: ${oauthClientSecret}
      accessTokenUri: ${oauthClientAccessTokenUri}
      userAuthorizationUri: ${oauthClientAuthorizationUri}
    resource:
      id: ${oauthResourceId}
      jwt:
        keyUri: ${oauthResourceTokenKeyUri}
